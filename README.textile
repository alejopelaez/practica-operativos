h1. Acerca de

Esta práctica ofrece una librería con dos funciones que se podrán utilizar desde Windows y desde Linux.

La primera función se llama *GetProcessList*, la cual retorna una lista con los _process id_ de los procesos que están corriendo actualmente en la máquina. Para invocar esta función, se debe enviar una referencia de una variable entera. En esta variable, al finalizar la función modificará este valor y allí se podrá encontrar el total de procesos corriendo.

La otra función, llamada *CpuUsage*,  retorna el porcentaje de uso de la CPU desde la última vez que se utilizó esta función. Es decir, cuando se llama por primera vez, retorna el uso de la CPU desde que se inició la máquina, pero la segunda vez retorna el uso de la CPU desde que se llamó la primera vez la función. Esta función no se debe llamar muy seguido, se recomienda mínimo cada segundo para poder apreciar un cambio significativo en el uso de la CPU.

A continuación se muestra un programa de prueba en linux que utiliza ambas funciones de la librería.

<pre>
    #include <cstdio>
    #include "linux/SO.h"
    int main(){    
         int* processes = NULL;
         int numP = 0;
         processes = SO::GetProcessList(&numP);
         printf("Procesos:\n");
         for(int i = 0; i < numP; ++i)
         printf("Proceso %d: %d\n",i+1,processes[i]);
         printf("%f\n",SO::CpuUsage());
         return 0;
    }
</pre>

h1. Compilación en Linux

Para compilar la librería en Linux, debemos correr el makefile. Esto sólo compilará la librería pero no copiará el .so a las carpetas necesarias.


Para compilar e instalar la librería, debemos correr el siguiente comando como sudo. Es necesario correrlo con sudo pues se copiarán archivos en */usr/lib* y en */usr/include* y se necesitan permisos para esto.

<pre>
sudo make install
</pre>

Esto creará el archivo *libso-eafit.so* el cual se copiará en la carpeta */usr/lib*. Además de esto, se copiará el archivo *SO.h* en la carpeta */usr/include/*

h2. Compilación y ejecución del programa de prueba

Una vez corrido el makefile con los permisos necesarios, es fácil compilar el programa de ejemplo, solo es necesario correr el siguiente comando

<pre>g++ -lso-eafit practica.cpp -o practica && ./practica</pre>

Esto compilará y correrá el programa compilado.

h1. Compilación en Windows
Para compilar la librería en windows hay que asegurarse que el simbolo BUILDING_DLL este definido, que se este compilando como un dll (algo equivalente a la opción -shared en minGW), y que se deben linkear las librerias psapi y Kernel32 (en minGW se -lpsapi -lKernel32).

Si se va compilar usando el IDE dev-c++ (fue como lo hicimos nosotros), en las opciones del proyecto bajo la pestaña general se selecciona type como win32 dll. Luego en las pestaña parameters bajo Compiler y C++ compiler se añade la siguiente linea
<pre>
-DBUILDING_DLL=1
</pre>
Bajo Linker se añade est otro
<pre>
--no-export-all-symbols --add-stdcall-alias
-lpsapi -lKernel32
</pre>
Por último bajo la pestaña build options hay que asegurarse que el nombre del archivo de salida sea SO.dll

h2. Compilación y ejecución del programa de prueba
Ya generado el dll se puede compilar el programa de prueba desde el mismo dev-c++ como un archivo solo(no hay necesidad de hacer un pryecto), lo único es que hay que ir a tools->compiler options y añadir la linea -lSO en las opciones del linker. Ademas es necesario que el .h de la libreria y el dll esten en la misma carpeta o en las carpetas del sistema (o cualquier que este definida en el ide)